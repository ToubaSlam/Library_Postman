{
	"info": {
		"_postman_id": "c628ab21-52b8-42f2-a441-cf5ae705840f",
		"name": "Library",
		"description": "# Library System API Documentation\n\nAPI documentation for the Node.js and JSON Server Library System CRUD API.",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "44829933",
		"_collection_link": "https://islamtoba.postman.co/workspace/13097a0e-7761-4d38-8196-86abc910846a/collection/44829933-c628ab21-52b8-42f2-a441-cf5ae705840f?action=share&source=collection_link&creator=44829933"
	},
	"item": [
		{
			"name": "1- Books",
			"item": [
				{
					"name": "1.1 Create New Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[1.1] TC01 Validate Response Code For Adding New Book is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.have.equal(201);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC02 Validate Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"[1.1] TC03 Validate Check Login response body contain Id\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"id\")\r",
									"});\r",
									"pm.test(\"[1.1] TC04 Validate Check Login response body contain Id not null\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC05 Validate Check Login response body contain Id not empty\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.undefined\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC06 Validate Check Id type number\", function () {\r",
									"    pm.expect(typeof pm.response.json().id).to.be.equal('number')\r",
									"});\r",
									"\r",
									"// Set the 'id' from the response in a collection variable\r",
									"pm.test(\"[1.1] TC07 Validate Set the 'id' from the response in a collection variable\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"bookId\", responseData.id);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC08 Validate TC05 Validate Response Schema is Valid\", function () {\r",
									"    var schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"title\": { \"type\": \"string\" },\r",
									"            \"author\": { \"type\": \"string\" },\r",
									"            \"isbn\": { \"type\": \"string\" },\r",
									"            \"releaseDate\": { \"type\": \"string\" },\r",
									"            \"createdAt\": { \"type\": \"string\" },\r",
									"            \"updatedAt\": { \"type\": \"string\" },\r",
									"            \"id\": { \"type\": \"integer\" }\r",
									"        },\r",
									"        \"required\": [\"title\", \"author\", \"isbn\", \"releaseDate\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC09 Validate Check title is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().title).to.not.be.null;\r",
									"    pm.expect(pm.response.json().title).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().title).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().title).to.be.eql(\"string\");\r",
									"    pm.expect(pm.response.json().title).to.eql(JSON.parse(pm.request.body.raw).title)\r",
									"    pm.collectionVariables.set(\"title\", pm.response.json().title);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC10 Validate Check author is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().author).to.not.be.null;\r",
									"    pm.expect(pm.response.json().author).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().author).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().author).to.be.eql(\"string\");\r",
									"    pm.expect(pm.response.json().author).to.eql(JSON.parse(pm.request.body.raw).author)\r",
									"    pm.collectionVariables.set(\"author\", pm.response.json().author);\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC11 Validate Check isbn is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().isbn).to.not.be.null;\r",
									"    pm.expect(pm.response.json().isbn).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().isbn).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().isbn).to.be.eql(\"string\");\r",
									"    pm.expect(pm.response.json().isbn).to.eql(JSON.parse(pm.request.body.raw).isbn)\r",
									"    pm.collectionVariables.set(\"isbn\", pm.response.json().isbn);\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC12 Validate Check releaseDate is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().releaseDate).to.not.be.null;\r",
									"    pm.expect(pm.response.json().releaseDate).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().releaseDate).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().releaseDate).to.be.eql(\"string\");\r",
									"    pm.expect(pm.response.json().releaseDate).to.eql(JSON.parse(pm.request.body.raw).releaseDate)\r",
									"    pm.collectionVariables.set(\"releaseDate\", pm.response.json().releaseDate);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC13 Validate Check createdAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().createdAt).to.be.eql('string');\r",
									"    pm.collectionVariables.set(\"createdAt\", pm.response.json().createdAt);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC14 Validate Check updatedAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().updatedAt).to.be.an('string');\r",
									"    pm.collectionVariables.set(\"updatedAt\", pm.response.json().updatedAt);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "G-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{$randomProductName}}\",\r\n    \"author\": \"{{$randomFullName}}\",\r\n    \"isbn\": \"{{$randomPhoneNumber}}\",\r\n    \"releaseDate\": \"{{$randomDatePast}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}books",
						"description": "### Create a New Book\n\nThis endpoint allows you to create a new book by providing the title, author, ISBN, and release date.\n\n#### Request Body\n\n- title (string, required): The title of the book.\n    \n- author (string, required): The author of the book.\n    \n- isbn (string, required): The ISBN of the book.\n    \n- releaseDate (string, required): The release date of the book.\n    \n\n#### Response (JSON Schema)\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"title\": { \"type\": \"string\" },\n        \"author\": { \"type\": \"string\" },\n        \"isbn\": { \"type\": \"string\" },\n        \"releaseDate\": { \"type\": \"string\" },\n        \"createdAt\": { \"type\": \"string\" },\n        \"updatedAt\": { \"type\": \"string\" },\n        \"id\": { \"type\": \"number\" }\n    }\n}\n\n ```"
					},
					"response": [
						{
							"name": "1.1 Create New Book",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "G-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"{{$randomProductName}}\",\r\n    \"author\": \"{{$randomFullName}}\",\r\n    \"isbn\": \"{{$randomPhoneNumber}}\",\r\n    \"releaseDate\": \"{{$randomDatePast}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/books"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "271"
								},
								{
									"key": "ETag",
									"value": "W/\"10f-bQgukng0RppG2CweOw8TyDSD6ss\""
								},
								{
									"key": "Date",
									"value": "Sat, 10 May 2025 05:47:24 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"title\": \"Gorgeous Soft Chicken\",\n    \"author\": \"Patrick Hagenes\",\n    \"isbn\": \"944-405-2229\",\n    \"releaseDate\": \"Sun Sep 01 2024 17:55:23 GMT-0500 (Central Daylight Time)\",\n    \"createdAt\": \"2025-05-10T05:47:24.944Z\",\n    \"updatedAt\": \"2025-05-10T05:47:24.948Z\",\n    \"id\": 70\n}"
						}
					]
				},
				{
					"name": "1.2 Get A Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[1.1] TC01 Validate Response Code For Adding New Book is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.have.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC02 Validate Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"[1.1] TC03 Validate Check Login response body contain Id\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"id\")\r",
									"});\r",
									"pm.test(\"[1.1] TC04 Validate Check Login response body contain Id not null\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC05 Validate Check Login response body contain Id not empty\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.undefined\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC06 Validate Check Id type equal number and value is same as post request\", function () {\r",
									"    pm.expect(typeof pm.response.json().id).to.be.equal('number')\r",
									"    pm.expect(pm.response.json().id).to.eql(pm.collectionVariables.get(\"bookId\"));\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC08 Validate TC05 Validate Response Schema is Valid\", function () {\r",
									"    var schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"title\": { \"type\": \"string\" },\r",
									"            \"author\": { \"type\": \"string\" },\r",
									"            \"isbn\": { \"type\": \"string\" },\r",
									"            \"releaseDate\": { \"type\": \"string\" },\r",
									"            \"createdAt\": { \"type\": \"string\" },\r",
									"            \"updatedAt\": { \"type\": \"string\" },\r",
									"            \"id\": { \"type\": \"integer\" }\r",
									"        },\r",
									"        \"required\": [\"title\", \"author\", \"isbn\", \"releaseDate\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC09 Validate Check title is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().title).to.not.be.null;\r",
									"    pm.expect(pm.response.json().title).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().title).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().title).to.be.eql(\"string\");\r",
									"    pm.expect(pm.response.json().title).to.eql(pm.collectionVariables.get(\"title\"));\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC10 Validate Check author is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().author).to.not.be.null;\r",
									"    pm.expect(pm.response.json().author).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().author).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().author).to.be.eql(\"string\");\r",
									"    pm.expect(pm.response.json().author).to.eql(pm.collectionVariables.get(\"author\"));\r",
									"\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC11 Validate Check isbn is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().isbn).to.not.be.null;\r",
									"    pm.expect(pm.response.json().isbn).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().isbn).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().isbn).to.be.eql(\"string\");\r",
									"    pm.expect(pm.response.json().isbn).to.eql(pm.collectionVariables.get(\"isbn\"));\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC12 Validate Check releaseDate is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().releaseDate).to.not.be.null;\r",
									"    pm.expect(pm.response.json().releaseDate).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().releaseDate).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().releaseDate).to.be.eql(\"string\");\r",
									"    pm.expect(pm.response.json().releaseDate).to.eql(pm.collectionVariables.get(\"releaseDate\"));\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC13 Validate Check createdAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().createdAt).to.be.eql('string');\r",
									"    pm.expect(pm.response.json().createdAt).to.eql(pm.collectionVariables.get(\"createdAt\"));\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC14 Validate Check updatedAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().updatedAt).to.be.an('string');\r",
									"    pm.expect(pm.response.json().updatedAt).to.eql(pm.collectionVariables.get(\"updatedAt\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}books/:id",
							"host": [
								"{{baseURL}}books"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{bookId}}"
								}
							]
						},
						"description": "The endpoint retrieves information about a specific book identified by its ID.\n\n### Response\n\nThe response will be a JSON object with the following properties:\n\n- `title` (string): The title of the book.\n    \n- `author` (string): The author of the book.\n    \n- `isbn` (string): The ISBN of the book.\n    \n- `releaseDate` (string): The release date of the book.\n    \n- `createdAt` (string): The timestamp when the book record was created.\n    \n- `updatedAt` (string): The timestamp when the book record was last updated.\n    \n- `id` (number): The unique identifier of the book.\n    \n\n#### JSON Schema\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"title\": { \"type\": \"string\" },\n    \"author\": { \"type\": \"string\" },\n    \"isbn\": { \"type\": \"string\" },\n    \"releaseDate\": { \"type\": \"string\" },\n    \"createdAt\": { \"type\": \"string\" },\n    \"updatedAt\": { \"type\": \"string\" },\n    \"id\": { \"type\": \"number\" }\n  }\n}\n\n ```"
					},
					"response": [
						{
							"name": "1.3 Get A Book",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/books/:id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"books",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{bookId}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "271"
								},
								{
									"key": "ETag",
									"value": "W/\"10f-bQgukng0RppG2CweOw8TyDSD6ss\""
								},
								{
									"key": "Date",
									"value": "Sat, 10 May 2025 05:47:28 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"title\": \"Gorgeous Soft Chicken\",\n    \"author\": \"Patrick Hagenes\",\n    \"isbn\": \"944-405-2229\",\n    \"releaseDate\": \"Sun Sep 01 2024 17:55:23 GMT-0500 (Central Daylight Time)\",\n    \"createdAt\": \"2025-05-10T05:47:24.944Z\",\n    \"updatedAt\": \"2025-05-10T05:47:24.948Z\",\n    \"id\": 70\n}"
						}
					]
				},
				{
					"name": "1.3 Update A Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[1.1] TC01 Validate Response Code For Adding New Book is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.have.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC02 Validate Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"[1.1] TC03 Validate Check Login response body contain Id\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"id\")\r",
									"});\r",
									"pm.test(\"[1.1] TC04 Validate Check Login response body contain Id not null\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC05 Validate Check Login response body contain Id not empty\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.undefined\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC06 Validate Check Id type number\", function () {\r",
									"    pm.expect(typeof pm.response.json().id).to.be.equal('number')\r",
									"});\r",
									"\r",
									"// Set the 'id' from the response in a collection variable\r",
									"pm.test(\"[1.1] TC07 Validate Set the 'id' from the response in a collection variable\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"bookId\", responseData.id);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC08 Validate TC05 Validate Response Schema is Valid\", function () {\r",
									"    var schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"title\": { \"type\": \"string\" },\r",
									"            \"author\": { \"type\": \"string\" },\r",
									"            \"isbn\": { \"type\": \"string\" },\r",
									"            \"releaseDate\": { \"type\": \"string\" },\r",
									"            \"createdAt\": { \"type\": \"string\" },\r",
									"            \"updatedAt\": { \"type\": \"string\" },\r",
									"            \"id\": { \"type\": \"integer\" }\r",
									"        },\r",
									"        \"required\": [\"title\", \"author\", \"isbn\", \"releaseDate\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC09 Validate Check title is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().title).to.not.be.null;\r",
									"    pm.expect(pm.response.json().title).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().title).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().title).to.be.eql(\"string\");\r",
									"    pm.expect(pm.response.json().title).to.eql(JSON.parse(pm.request.body.raw).title)\r",
									"    pm.collectionVariables.set(\"title\", pm.response.json().title);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC10 Validate Check author is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().author).to.not.be.null;\r",
									"    pm.expect(pm.response.json().author).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().author).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().author).to.be.eql(\"string\");\r",
									"    pm.expect(pm.response.json().author).to.eql(JSON.parse(pm.request.body.raw).author)\r",
									"    pm.collectionVariables.set(\"author\", pm.response.json().author);\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC11 Validate Check isbn is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().isbn).to.not.be.null;\r",
									"    pm.expect(pm.response.json().isbn).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().isbn).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().isbn).to.be.eql(\"string\");\r",
									"    pm.expect(pm.response.json().isbn).to.eql(JSON.parse(pm.request.body.raw).isbn)\r",
									"    pm.collectionVariables.set(\"isbn\", pm.response.json().isbn);\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC12 Validate Check releaseDate is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().releaseDate).to.not.be.null;\r",
									"    pm.expect(pm.response.json().releaseDate).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().releaseDate).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().releaseDate).to.be.eql(\"string\");\r",
									"    pm.expect(pm.response.json().releaseDate).to.eql(JSON.parse(pm.request.body.raw).releaseDate)\r",
									"    pm.collectionVariables.set(\"releaseDate\", pm.response.json().releaseDate);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC13 Validate Check createdAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().createdAt).to.be.eql('string');\r",
									"    pm.collectionVariables.set(\"createdAt\", pm.response.json().createdAt);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC14 Validate Check updatedAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().updatedAt).to.be.an('string');\r",
									"    pm.collectionVariables.set(\"updatedAt\", pm.response.json().updatedAt);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"password": "admin",
								"username": "admin"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "G-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{$randomProductName}}\",\r\n    \"author\": \"{{$randomFullName}}\",\r\n    \"isbn\": \"{{$randomPhoneNumber}}\",\r\n    \"releaseDate\": \"{{$randomDatePast}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}books/:id",
							"host": [
								"{{baseURL}}books"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{bookId}}"
								}
							]
						},
						"description": "The endpoint allows updating a book by sending an HTTP PUT request to the specified URL with the book's ID. The request body should contain the updated book details including title, author, ISBN, and release date.\n\n### Request Body\n\n- title (string, required): The updated title of the book.\n    \n- author (string, required): The updated author of the book.\n    \n- isbn (string, required): The updated ISBN of the book.\n    \n- releaseDate (string, required): The updated release date of the book.\n    \n\n### Response\n\nThe response will be in JSON format with the following schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"title\": {\"type\": \"string\"},\n        \"author\": {\"type\": \"string\"},\n        \"isbn\": {\"type\": \"string\"},\n        \"releaseDate\": {\"type\": \"string\"},\n        \"createdAt\": {\"type\": \"string\"},\n        \"updatedAt\": {\"type\": \"string\"},\n        \"id\": {\"type\": \"integer\"}\n    }\n}\n\n ```\n\n### Example Response\n\n``` json\n{\n    \"title\": \"\",\n    \"author\": \"\",\n    \"isbn\": \"\",\n    \"releaseDate\": \"\",\n    \"createdAt\": \"\",\n    \"updatedAt\": \"\",\n    \"id\": 0\n}\n\n ```"
					},
					"response": [
						{
							"name": "1.4 Update A Book",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "G-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"{{$randomProductName}}\",\r\n    \"author\": \"{{$randomFullName}}\",\r\n    \"isbn\": \"{{$randomPhoneNumber}}\",\r\n    \"releaseDate\": \"{{$randomDatePast}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/books/:id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"books",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{bookId}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "273"
								},
								{
									"key": "ETag",
									"value": "W/\"111-Yced5dWEFmMf83phFY4RlKIYrdA\""
								},
								{
									"key": "Date",
									"value": "Sat, 10 May 2025 05:47:31 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"title\": \"Fantastic Granite Ball\",\n    \"author\": \"Shelia Rodriguez\",\n    \"isbn\": \"366-508-5160\",\n    \"releaseDate\": \"Sun Apr 13 2025 15:16:51 GMT-0500 (Central Daylight Time)\",\n    \"createdAt\": \"2025-05-10T05:47:24.944Z\",\n    \"updatedAt\": \"2025-05-10T05:47:31.120Z\",\n    \"id\": 70\n}"
						}
					]
				},
				{
					"name": "1.4 Get A Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[1.1] TC01 Validate Response Code For Adding New Book is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.have.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC02 Validate Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"[1.1] TC03 Validate Check Login response body contain Id\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"id\")\r",
									"});\r",
									"pm.test(\"[1.1] TC04 Validate Check Login response body contain Id not null\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC05 Validate Check Login response body contain Id not empty\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.undefined\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC06 Validate Check Id type equal number and value is same as post request\", function () {\r",
									"    pm.expect(typeof pm.response.json().id).to.be.equal('number')\r",
									"    pm.expect(pm.response.json().id).to.eql(pm.collectionVariables.get(\"bookId\"));\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC08 Validate TC05 Validate Response Schema is Valid\", function () {\r",
									"    var schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"title\": { \"type\": \"string\" },\r",
									"            \"author\": { \"type\": \"string\" },\r",
									"            \"isbn\": { \"type\": \"string\" },\r",
									"            \"releaseDate\": { \"type\": \"string\" },\r",
									"            \"createdAt\": { \"type\": \"string\" },\r",
									"            \"updatedAt\": { \"type\": \"string\" },\r",
									"            \"id\": { \"type\": \"integer\" }\r",
									"        },\r",
									"        \"required\": [\"title\", \"author\", \"isbn\", \"releaseDate\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC09 Validate Check title is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().title).to.not.be.null;\r",
									"    pm.expect(pm.response.json().title).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().title).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().title).to.be.eql(\"string\");\r",
									"    pm.expect(pm.response.json().title).to.eql(pm.collectionVariables.get(\"title\"));\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC10 Validate Check author is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().author).to.not.be.null;\r",
									"    pm.expect(pm.response.json().author).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().author).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().author).to.be.eql(\"string\");\r",
									"    pm.expect(pm.response.json().author).to.eql(pm.collectionVariables.get(\"author\"));\r",
									"\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC11 Validate Check isbn is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().isbn).to.not.be.null;\r",
									"    pm.expect(pm.response.json().isbn).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().isbn).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().isbn).to.be.eql(\"string\");\r",
									"    pm.expect(pm.response.json().isbn).to.eql(pm.collectionVariables.get(\"isbn\"));\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC12 Validate Check releaseDate is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().releaseDate).to.not.be.null;\r",
									"    pm.expect(pm.response.json().releaseDate).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().releaseDate).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().releaseDate).to.be.eql(\"string\");\r",
									"    pm.expect(pm.response.json().releaseDate).to.eql(pm.collectionVariables.get(\"releaseDate\"));\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC13 Validate Check createdAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().createdAt).to.be.eql('string');\r",
									"    pm.expect(pm.response.json().createdAt).to.eql(pm.collectionVariables.get(\"createdAt\"));\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC14 Validate Check updatedAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().updatedAt).to.be.an('string');\r",
									"    pm.expect(pm.response.json().updatedAt).to.eql(pm.collectionVariables.get(\"updatedAt\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}books/:id",
							"host": [
								"{{baseURL}}books"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{bookId}}"
								}
							]
						},
						"description": "### Get Book Details by ID\n\nThis endpoint retrieves the details of a specific book based on the provided ID.\n\n#### Request\n\n- Method: GET\n    \n- Endpoint: `{{baseURL}}/books/:id`\n    \n\n#### Response\n\nThe response will contain the details of the book in JSON format with the following properties:\n\n- `title` (string): The title of the book.\n    \n- `author` (string): The author of the book.\n    \n- `isbn` (string): The ISBN of the book.\n    \n- `releaseDate` (string): The release date of the book.\n    \n- `createdAt` (string): The timestamp of when the book record was created.\n    \n- `updatedAt` (string): The timestamp of when the book record was last updated.\n    \n- `id` (number): The unique identifier of the book.\n    \n\n#### Example Response\n\n``` json\n{\n    \"title\": \"\",\n    \"author\": \"\",\n    \"isbn\": \"\",\n    \"releaseDate\": \"\",\n    \"createdAt\": \"\",\n    \"updatedAt\": \"\",\n    \"id\": 0\n}\n\n ```"
					},
					"response": [
						{
							"name": "1.5 Get A Book",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/books/:id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"books",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{bookId}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "273"
								},
								{
									"key": "ETag",
									"value": "W/\"111-Yced5dWEFmMf83phFY4RlKIYrdA\""
								},
								{
									"key": "Date",
									"value": "Sat, 10 May 2025 05:47:33 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"title\": \"Fantastic Granite Ball\",\n    \"author\": \"Shelia Rodriguez\",\n    \"isbn\": \"366-508-5160\",\n    \"releaseDate\": \"Sun Apr 13 2025 15:16:51 GMT-0500 (Central Daylight Time)\",\n    \"createdAt\": \"2025-05-10T05:47:24.944Z\",\n    \"updatedAt\": \"2025-05-10T05:47:31.120Z\",\n    \"id\": 70\n}"
						}
					]
				},
				{
					"name": "1.5 Delete A Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[1.8] TC01 Validate Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.8] TC02 Validate Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.8] TC03 Validate Check response body to not contain bookId\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"bookId\");\r",
									"});\r",
									"\r",
									"pm.test(\"[1.8] TC04 Validate Status code is 200 or 204\", function () {\r",
									"    pm.expect([200, 204]).to.include(pm.response.code);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"password": "admin",
								"username": "admin"
							}
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}books/:id",
							"host": [
								"{{baseURL}}books"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{bookId}}"
								}
							]
						},
						"description": "### Delete Book by ID\n\nThis endpoint is used to delete a specific book by its ID.\n\n#### Request\n\n- Method: DELETE\n    \n- URL: `{{baseURL}}books/:id`\n    \n- Path Parameters:\n    \n    - `id` (string, required): The unique identifier of the book to be deleted.\n        \n\n#### Response\n\nThe response for this request is a JSON schema describing the success or failure of the delete operation. The schema includes properties such as `status` to indicate the operation status and `message` to provide additional information about the operation.\n\nExample Response Schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\",\n      \"description\": \"Indicates the status of the delete operation.\"\n    },\n    \"message\": {\n      \"type\": \"string\",\n      \"description\": \"Additional information about the delete operation.\"\n    }\n  }\n}\n\n ```"
					},
					"response": [
						{
							"name": "1.8 Delete A Book",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/books/:id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"books",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{bookId}}"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Date",
									"value": "Sat, 10 May 2025 05:47:35 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "1.6 Get A Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[1.1] TC01 Validate Response Code For Adding New Book is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.have.equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC02 Validate Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"[1.1] TC03 Validate Check Login response body contain Id\", function () {\r",
									"    pm.expect(pm.response.json()).to.not.have.property(\"id\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}books/:id",
							"host": [
								"{{baseURL}}books"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{bookId}}"
								}
							]
						},
						"description": "This endpoint retrieves the details of a specific book identified by its unique ID.\n\n### Response\n\nThe response of this request is a JSON object representing the details of the book. You can refer to the following JSON schema to understand the structure of the response:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"title\": {\n      \"type\": \"string\"\n    },\n    \"author\": {\n      \"type\": \"string\"\n    },\n    \"genre\": {\n      \"type\": \"string\"\n    },\n    \"publishedDate\": {\n      \"type\": \"string\",\n      \"format\": \"date\"\n    }\n    // Additional properties may be present based on the specific book details\n  }\n}\n\n ```"
					},
					"response": [
						{
							"name": "1.9 Get A Book",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/books/:id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"books",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{bookId}}"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "33"
								},
								{
									"key": "ETag",
									"value": "W/\"21-scWDTMDC1xwvJ1YlcV1rbeay1i4\""
								},
								{
									"key": "Date",
									"value": "Sat, 10 May 2025 03:42:40 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Book not found\"\n}"
						}
					]
				}
			],
			"description": "### Create a New Book\n\nThis endpoint allows you to create a new book by providing the title, author, ISBN, and release date."
		},
		{
			"name": "2- HouseHolds",
			"item": [
				{
					"name": "2.1 Create new Household",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[2.1] TC01 Validate Response Code For Adding New Book is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.have.equal(201);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.1] TC02 Validate Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"[2.1]] TC03 Validate Check Login response body contain Id\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"id\")\r",
									"});\r",
									"pm.test(\"[2.1] TC04 Validate Check Login response body contain Id not null\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"[2.1] TC05 Validate Check Login response body contain Id not empty\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.undefined\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[2.1] TC06 Validate Check Id type number\", function () {\r",
									"    pm.expect(typeof pm.response.json().id).to.be.equal('number')\r",
									"});\r",
									"\r",
									"// Set the 'id' from the response in a collection variable\r",
									"pm.test(\"[2.1] TC07 Validate Set the 'id' from the response in a collection variable\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"houseHoldId\", responseData.id);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.1] TC08 Validate TC05 Validate Response Schema is Valid\", function () {\r",
									"    var schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"name\": { \"type\": \"string\" },\r",
									"            \"createdAt\": { \"type\": \"string\" },\r",
									"            \"updatedAt\": { \"type\": \"string\" },\r",
									"            \"id\": { \"type\": \"integer\" }\r",
									"        },\r",
									"        \"required\": [\"name\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.1] TC09 Validate Check name is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().name).to.not.be.null;\r",
									"    pm.expect(pm.response.json().name).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().name).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().name).to.be.eql(\"string\");\r",
									"    pm.expect(pm.response.json().name).to.eql(JSON.parse(pm.request.body.raw).name)\r",
									"    pm.collectionVariables.set(\"name\", pm.response.json().name);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[2.1] TC10 Validate Check createdAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().createdAt).to.be.eql('string');\r",
									"    pm.collectionVariables.set(\"createdAt\", pm.response.json().createdAt);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.1] TC11 Validate Check updatedAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().updatedAt).to.be.an('string');\r",
									"    pm.collectionVariables.set(\"updatedAt\", pm.response.json().updatedAt);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"name\": \"{{$randomFullName}}\" }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}households",
						"description": "This endpoint allows you to create a new household by sending an HTTP POST request to {{baseURL}}households. The request should include a raw request body with a JSON payload containing the name of the household.\n\n### Request Body\n\n- `name` (string, required): The name of the household.\n    \n\n### Response\n\nUpon successful creation of the household, the response will include the following fields:\n\n- `name` (string): The name of the household.\n    \n- `createdAt` (string): The timestamp when the household was created.\n    \n- `updatedAt` (string): The timestamp when the household was last updated.\n    \n- `id` (integer): The unique identifier for the household.\n    \n\nIf the request is unsuccessful, the response will include an appropriate error message."
					},
					"response": [
						{
							"name": "2.3 Create new Household",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \"name\": \"{{$randomFullName}}\" }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/households"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "134"
								},
								{
									"key": "ETag",
									"value": "W/\"86-8FyPbyR2VmkRPp0OVjRzgylh+YU\""
								},
								{
									"key": "Date",
									"value": "Sat, 10 May 2025 03:43:34 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"Shelly Heidenreich I\",\n    \"createdAt\": \"2025-05-10T03:43:34.773Z\",\n    \"updatedAt\": \"2025-05-10T03:43:34.773Z\",\n    \"id\": 30\n}"
						}
					]
				},
				{
					"name": "2.2 Get A Households",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[1.1] TC01 Validate Response Code For Adding New Book is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.have.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC02 Validate Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"[1.1] TC03 Validate Check Login response body contain Id\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"id\")\r",
									"});\r",
									"pm.test(\"[1.1] TC04 Validate Check Login response body contain Id not null\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC05 Validate Check Login response body contain Id not empty\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.undefined\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC06 Validate Check Id type equal number and value is same as post request\", function () {\r",
									"    pm.expect(typeof pm.response.json().id).to.be.equal('number')\r",
									"    pm.expect(pm.response.json().id).to.eql(pm.collectionVariables.get(\"houseHoldId\"));\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC07 Validate Response Schema is Valid\", function () {\r",
									"    var schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"name\": { \"type\": \"string\" },\r",
									"            \"createdAt\": { \"type\": \"string\" },\r",
									"            \"updatedAt\": { \"type\": \"string\" },\r",
									"            \"id\": { \"type\": \"integer\" }\r",
									"        },\r",
									"        \"required\": [\"name\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC09 Validate Check name is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().name).to.not.be.null;\r",
									"    pm.expect(pm.response.json().name).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().name).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().name).to.be.eql(\"string\");\r",
									"    pm.expect(pm.response.json().name).to.eql(pm.collectionVariables.get(\"name\"));\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC13 Validate Check createdAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().createdAt).to.be.eql('string');\r",
									"    pm.expect(pm.response.json().createdAt).to.eql(pm.collectionVariables.get(\"createdAt\"));\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC14 Validate Check updatedAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().updatedAt).to.be.an('string');\r",
									"    pm.expect(pm.response.json().updatedAt).to.eql(pm.collectionVariables.get(\"updatedAt\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}households/:id",
							"host": [
								"{{baseURL}}households"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{houseHoldId}}"
								}
							]
						},
						"description": "This endpoint makes an HTTP GET request to retrieve information about a specific household identified by its ID. The request does not require a request body.\n\n### Request Body\n\nThis request does not require a request body.\n\n### Response\n\nUpon a successful request, the response will include the details of the household, including its name, creation date, last update date, and unique identifier.\n\nExample response:\n\n``` json\n{\n    \"name\": \"\",\n    \"createdAt\": \"\",\n    \"updatedAt\": \"\",\n    \"id\": 0\n}\n\n ```"
					},
					"response": [
						{
							"name": "2.2 Get A Households",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/households/:id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"households",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{houseHoldId}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "134"
								},
								{
									"key": "ETag",
									"value": "W/\"86-8FyPbyR2VmkRPp0OVjRzgylh+YU\""
								},
								{
									"key": "Date",
									"value": "Sat, 10 May 2025 03:43:42 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"Shelly Heidenreich I\",\n    \"createdAt\": \"2025-05-10T03:43:34.773Z\",\n    \"updatedAt\": \"2025-05-10T03:43:34.773Z\",\n    \"id\": 30\n}"
						}
					]
				},
				{
					"name": "2.3 Update A Household",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[2.1] TC01 Validate Response Code For Adding New Book is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.have.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.1] TC02 Validate Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"[2.1]] TC03 Validate Check Login response body contain Id\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"id\")\r",
									"});\r",
									"pm.test(\"[2.1] TC04 Validate Check Login response body contain Id not null\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"[2.1] TC05 Validate Check Login response body contain Id not empty\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.undefined\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[2.1] TC06 Validate Check Id type number\", function () {\r",
									"    pm.expect(typeof pm.response.json().id).to.be.equal('number')\r",
									"});\r",
									"\r",
									"// Set the 'id' from the response in a collection variable\r",
									"pm.test(\"[2.1] TC07 Validate Set the 'id' from the response in a collection variable\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"houseHoldId\", responseData.id);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.1] TC08 Validate TC05 Validate Response Schema is Valid\", function () {\r",
									"    var schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"name\": { \"type\": \"string\" },\r",
									"            \"createdAt\": { \"type\": \"string\" },\r",
									"            \"updatedAt\": { \"type\": \"string\" },\r",
									"            \"id\": { \"type\": \"integer\" }\r",
									"        },\r",
									"        \"required\": [\"name\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.1] TC09 Validate Check name is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().name).to.not.be.null;\r",
									"    pm.expect(pm.response.json().name).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().name).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().name).to.be.eql(\"string\");\r",
									"    pm.expect(pm.response.json().name).to.eql(JSON.parse(pm.request.body.raw).name)\r",
									"    pm.collectionVariables.set(\"name\", pm.response.json().name);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[2.1] TC10 Validate Check createdAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().createdAt).to.be.eql('string');\r",
									"    pm.collectionVariables.set(\"createdAt\", pm.response.json().createdAt);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.1] TC11 Validate Check updatedAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().updatedAt).to.be.an('string');\r",
									"    pm.collectionVariables.set(\"updatedAt\", pm.response.json().updatedAt);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"name\": \"{{$randomFullName}}\" }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}households/:id",
							"host": [
								"{{baseURL}}households"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{houseHoldId}}"
								}
							]
						},
						"description": "### Update Household Details\n\nThis endpoint is used to update the details of a specific household.\n\n#### Request Body\n\n- `name` (string, required): The updated name of the household.\n    \n\n#### Response\n\nThe response will be a JSON object with the following properties:\n\n- `name` (string): The updated name of the household.\n    \n- `createdAt` (string): The timestamp when the household record was created.\n    \n- `updatedAt` (string): The timestamp when the household record was last updated.\n    \n- `id` (integer): The unique identifier of the household.\n    \n\n#### Example Response\n\n``` json\n{\n  \"name\": \"example\",\n  \"createdAt\": \"2022-01-01T12:00:00Z\",\n  \"updatedAt\": \"2022-01-02T08:00:00Z\",\n  \"id\": 123\n}\n\n ```"
					},
					"response": [
						{
							"name": "2.4 Update A Household",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \"name\": \"{{$randomFullName}}\" }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/households/:id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"households",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{houseHoldId}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "128"
								},
								{
									"key": "ETag",
									"value": "W/\"80-hFWuc2N+jxJcVle0lxndL8bwnKg\""
								},
								{
									"key": "Date",
									"value": "Sat, 10 May 2025 03:43:49 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"Melinda Carter\",\n    \"createdAt\": \"2025-05-10T03:43:34.773Z\",\n    \"updatedAt\": \"2025-05-10T03:43:49.486Z\",\n    \"id\": 30\n}"
						}
					]
				},
				{
					"name": "2.4 Get A Households Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[1.1] TC01 Validate Response Code For Adding New Book is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.have.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC02 Validate Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"[1.1] TC03 Validate Check Login response body contain Id\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"id\")\r",
									"});\r",
									"pm.test(\"[1.1] TC04 Validate Check Login response body contain Id not null\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC05 Validate Check Login response body contain Id not empty\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.undefined\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC06 Validate Check Id type equal number and value is same as post request\", function () {\r",
									"    pm.expect(typeof pm.response.json().id).to.be.equal('number')\r",
									"    pm.expect(pm.response.json().id).to.eql(pm.collectionVariables.get(\"houseHoldId\"));\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC07 Validate Response Schema is Valid\", function () {\r",
									"    var schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"name\": { \"type\": \"string\" },\r",
									"            \"createdAt\": { \"type\": \"string\" },\r",
									"            \"updatedAt\": { \"type\": \"string\" },\r",
									"            \"id\": { \"type\": \"integer\" }\r",
									"        },\r",
									"        \"required\": [\"name\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC09 Validate Check name is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().name).to.not.be.null;\r",
									"    pm.expect(pm.response.json().name).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().name).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().name).to.be.eql(\"string\");\r",
									"    pm.expect(pm.response.json().name).to.eql(pm.collectionVariables.get(\"name\"));\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC13 Validate Check createdAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().createdAt).to.be.eql('string');\r",
									"    pm.expect(pm.response.json().createdAt).to.eql(pm.collectionVariables.get(\"createdAt\"));\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC14 Validate Check updatedAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().updatedAt).to.be.an('string');\r",
									"    pm.expect(pm.response.json().updatedAt).to.eql(pm.collectionVariables.get(\"updatedAt\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}households/:id",
							"host": [
								"{{baseURL}}households"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{houseHoldId}}"
								}
							]
						},
						"description": "### Get Household Details\n\nThis endpoint retrieves the details of a specific household identified by the unique `id`.\n\n**Request**\n\n- Method: `GET`\n    \n- Endpoint: `{{baseURL}}households/:id`\n    \n\n**Response**  \nThe response will include the following details for the household:\n\n- `name` (string): The name of the household.\n    \n- `createdAt` (string): The timestamp when the household was created.\n    \n- `updatedAt` (string): The timestamp when the household was last updated.\n    \n- `id` (integer): The unique identifier of the household."
					},
					"response": [
						{
							"name": "2.2 Get A Households",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/households/:id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"households",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{houseHoldId}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "128"
								},
								{
									"key": "ETag",
									"value": "W/\"80-hFWuc2N+jxJcVle0lxndL8bwnKg\""
								},
								{
									"key": "Date",
									"value": "Sat, 10 May 2025 03:44:44 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"Melinda Carter\",\n    \"createdAt\": \"2025-05-10T03:43:34.773Z\",\n    \"updatedAt\": \"2025-05-10T03:43:49.486Z\",\n    \"id\": 30\n}"
						}
					]
				},
				{
					"name": "2.5 Partially Update A Household",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[2.1] TC01 Validate Response Code For Adding New Book is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.1] TC02 Validate Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.1] TC03 Validate Check Login response body contains 'id'\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"[2.1] TC04 Validate 'id' is not null\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"[2.1] TC05 Validate 'id' is not undefined\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"[2.1] TC06 Validate 'id' is of type number\", function () {\r",
									"    pm.expect(typeof pm.response.json().id).to.equal(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"[2.1] TC07 Save 'id' as collection variable\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"houseHoldId\", responseData.id);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.1] TC08 Validate Response Schema is Valid\", function () {\r",
									"    const schema = {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"            name: { type: \"string\" },\r",
									"            createdAt: { type: \"string\" },\r",
									"            updatedAt: { type: \"string\" },\r",
									"            id: { type: \"integer\" }\r",
									"        },\r",
									"        required: [\"name\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.1] TC09 Validate 'name' matches request and is valid\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.name).to.not.be.null;\r",
									"    pm.expect(responseJson.name).to.not.be.undefined;\r",
									"    pm.expect(responseJson.name).to.not.be.empty;\r",
									"    pm.expect(typeof responseJson.name).to.equal(\"string\");\r",
									"\r",
									"    const requestBody = pm.request.body && pm.request.body.raw;\r",
									"    if (requestBody) {\r",
									"        const parsedBody = JSON.parse(requestBody);\r",
									"        pm.expect(responseJson.name).to.eql(parsedBody.name);\r",
									"    } else {\r",
									"        console.warn(\"Request body is undefined or empty, skipping name comparison.\");\r",
									"    }\r",
									"\r",
									"    pm.collectionVariables.set(\"name\", responseJson.name);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.1] TC10 Validate 'createdAt' is valid and save\", function () {\r",
									"    const createdAt = pm.response.json().createdAt;\r",
									"    pm.expect(createdAt).to.not.be.null;\r",
									"    pm.expect(createdAt).to.not.be.undefined;\r",
									"    pm.expect(createdAt).to.not.be.empty;\r",
									"    pm.expect(typeof createdAt).to.equal(\"string\");\r",
									"\r",
									"    pm.collectionVariables.set(\"createdAt\", createdAt);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.1] TC11 Validate 'updatedAt' is valid and save\", function () {\r",
									"    const updatedAt = pm.response.json().updatedAt;\r",
									"    pm.expect(updatedAt).to.not.be.null;\r",
									"    pm.expect(updatedAt).to.not.be.undefined;\r",
									"    pm.expect(updatedAt).to.not.be.empty;\r",
									"    pm.expect(typeof updatedAt).to.equal(\"string\");\r",
									"\r",
									"    pm.collectionVariables.set(\"updatedAt\", updatedAt);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}households/:id",
							"host": [
								"{{baseURL}}households"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{houseHoldId}}"
								}
							]
						},
						"description": "### Update Household Details\n\nThis endpoint allows the user to update specific details of a household.\n\n#### Request Body\n\n- No request body is required for this endpoint.\n    \n\n#### Response\n\nThe response will include the updated details of the household in JSON format. The schema for the response is as follows:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"createdAt\": {\n      \"type\": \"string\"\n    },\n    \"updatedAt\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"integer\"\n    }\n  }\n}\n\n ```"
					},
					"response": [
						{
							"name": "2.5 Partially Update A Household",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/households/:id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"households",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{houseHoldId}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "128"
								},
								{
									"key": "ETag",
									"value": "W/\"80-hFWuc2N+jxJcVle0lxndL8bwnKg\""
								},
								{
									"key": "Date",
									"value": "Sat, 10 May 2025 03:44:03 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"Melinda Carter\",\n    \"createdAt\": \"2025-05-10T03:43:34.773Z\",\n    \"updatedAt\": \"2025-05-10T03:43:49.486Z\",\n    \"id\": 30\n}"
						}
					]
				},
				{
					"name": "2.6 Get A Households",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[1.1] TC01 Validate Response Code For Adding New Book is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.have.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC02 Validate Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"[1.1] TC03 Validate Check Login response body contain Id\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"id\")\r",
									"});\r",
									"pm.test(\"[1.1] TC04 Validate Check Login response body contain Id not null\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC05 Validate Check Login response body contain Id not empty\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.undefined\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC06 Validate Check Id type equal number and value is same as post request\", function () {\r",
									"    pm.expect(typeof pm.response.json().id).to.be.equal('number')\r",
									"    pm.expect(pm.response.json().id).to.eql(pm.collectionVariables.get(\"houseHoldId\"));\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC07 Validate Response Schema is Valid\", function () {\r",
									"    var schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"name\": { \"type\": \"string\" },\r",
									"            \"createdAt\": { \"type\": \"string\" },\r",
									"            \"updatedAt\": { \"type\": \"string\" },\r",
									"            \"id\": { \"type\": \"integer\" }\r",
									"        },\r",
									"        \"required\": [\"name\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC09 Validate Check name is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().name).to.not.be.null;\r",
									"    pm.expect(pm.response.json().name).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().name).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().name).to.be.eql(\"string\");\r",
									"    pm.expect(pm.response.json().name).to.eql(pm.collectionVariables.get(\"name\"));\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC13 Validate Check createdAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().createdAt).to.be.eql('string');\r",
									"    pm.expect(pm.response.json().createdAt).to.eql(pm.collectionVariables.get(\"createdAt\"));\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC14 Validate Check updatedAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().updatedAt).to.be.an('string');\r",
									"    pm.expect(pm.response.json().updatedAt).to.eql(pm.collectionVariables.get(\"updatedAt\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}households/:id",
							"host": [
								"{{baseURL}}households"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{houseHoldId}}"
								}
							]
						},
						"description": "This endpoint retrieves the details of a specific household identified by its unique ID.\n\n### Request\n\n- Method: GET\n    \n- URL: {{baseURL}}households/:id\n    \n\n### Response\n\nThe response will include the following details of the household:\n\n- `name` (string): The name of the household.\n    \n- `createdAt` (string): The timestamp of when the household was created.\n    \n- `updatedAt` (string): The timestamp of when the household was last updated.\n    \n- `id` (integer): The unique identifier of the household."
					},
					"response": [
						{
							"name": "2.2 Get A Households",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/households/:id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"households",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{houseHoldId}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "128"
								},
								{
									"key": "ETag",
									"value": "W/\"80-hFWuc2N+jxJcVle0lxndL8bwnKg\""
								},
								{
									"key": "Date",
									"value": "Sat, 10 May 2025 03:44:44 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"Melinda Carter\",\n    \"createdAt\": \"2025-05-10T03:43:34.773Z\",\n    \"updatedAt\": \"2025-05-10T03:43:49.486Z\",\n    \"id\": 30\n}"
						}
					]
				},
				{
					"name": "2.7 Delete A Household",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {\r",
									"    pm.expect([200, 204]).to.include(pm.response.code);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"pm.test(\"Check Login response body not contain bookId\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"bookId\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"password": "admin",
								"username": "admin"
							}
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}households/:id",
							"host": [
								"{{baseURL}}households"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{houseHoldId}}"
								}
							]
						},
						"description": "### Delete Household by ID\n\nThis endpoint is used to delete a specific household by its ID.\n\n#### Request\n\n- Method: DELETE\n    \n- URL: `{{baseURL}}households/:id`\n    \n\n#### Response\n\nThe response for this request is expected to be `null`.\n\n#### Request Body\n\nThis request does not require a request body.\n\n#### Response Body\n\nThe response for this request does not include a JSON schema."
					},
					"response": [
						{
							"name": "2.7 Delete A Household",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/households/:id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"households",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{houseHoldId}}"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Date",
									"value": "Sat, 10 May 2025 03:44:55 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "2.8 Get A Households",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[2.1] TC01 Validate Response Code For Adding New Book is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.have.equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.1] TC02 Validate Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"[2.1] TC03 Validate Check Login response body contain Id\", function () {\r",
									"    pm.expect(pm.response.json()).to.not.have.property(\"id\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}households/:id",
							"host": [
								"{{baseURL}}households"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{bookId}}"
								}
							]
						},
						"description": "### Get Household Details\n\nThis endpoint retrieves the details of a specific household identified by its unique ID.\n\n#### Request\n\n- Method: GET\n    \n- URL: `{{baseURL}}households/:id`\n    \n\n#### Response\n\n- The response will include the details of the household such as its ID, address, members, and any other relevant information."
					},
					"response": [
						{
							"name": "2.2 Get A Households",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/households/:id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"households",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{bookId}}"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "38"
								},
								{
									"key": "ETag",
									"value": "W/\"26-v4aOsgDFZWLbBLdtaD1li4L2uMc\""
								},
								{
									"key": "Date",
									"value": "Sat, 10 May 2025 03:46:00 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Household not found\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "3- Users",
			"item": [
				{
					"name": "3.1 Create A new User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[1.1] TC01 Validate Response Code For Adding New Book is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.have.equal(201);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC02 Validate Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"[1.1] TC03 Validate Check Login response body contain Id\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"id\")\r",
									"});\r",
									"pm.test(\"[1.1] TC04 Validate Check Login response body contain Id not null\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC05 Validate Check Login response body contain Id not empty\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.undefined\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC06 Validate Check Id type number\", function () {\r",
									"    pm.expect(typeof pm.response.json().id).to.be.equal('number')\r",
									"});\r",
									"\r",
									"// Set the 'id' from the response in a collection variable\r",
									"pm.test(\"[1.1] TC07 Validate Set the 'id' from the response in a collection variable\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"userId\", responseData.id);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC08 Validate Response Schema is Valid\", function () {\r",
									"    var schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"firstName\": { \"type\": \"string\" },\r",
									"            \"lastName\": { \"type\": \"string\" },\r",
									"            \"email\": { \"type\": \"string\" },\r",
									"            \"createdAt\": { \"type\": \"string\" },\r",
									"            \"updatedAt\": { \"type\": \"string\" },\r",
									"            \"id\": { \"type\": \"integer\" }\r",
									"        },\r",
									"        \"required\": [\"firstName\", \"lastName\", \"email\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC09 Validate Check firstName is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().firstName).to.not.be.null;\r",
									"    pm.expect(pm.response.json().firstName).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().firstName).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().firstName).to.be.eql(\"string\");\r",
									"    pm.expect(pm.response.json().firstName).to.eql(JSON.parse(pm.request.body.raw).firstName)\r",
									"    pm.collectionVariables.set(\"firstName\", pm.response.json().firstName);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC10 Validate Check lastName is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().lastName).to.not.be.null;\r",
									"    pm.expect(pm.response.json().lastName).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().lastName).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().lastName).to.be.eql(\"string\");\r",
									"    pm.expect(pm.response.json().lastName).to.eql(JSON.parse(pm.request.body.raw).lastName)\r",
									"    pm.collectionVariables.set(\"lastName\", pm.response.json().lastName);\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC11 Validate Check isbn is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().email).to.not.be.null;\r",
									"    pm.expect(pm.response.json().email).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().email).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().email).to.be.eql(\"string\");\r",
									"    pm.expect(pm.response.json().email).to.eql(JSON.parse(pm.request.body.raw).email)\r",
									"    pm.collectionVariables.set(\"email\", pm.response.json().email);\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC13 Validate Check createdAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().createdAt).to.be.eql('string');\r",
									"    pm.collectionVariables.set(\"createdAt\", pm.response.json().createdAt);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC14 Validate Check updatedAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().updatedAt).to.be.an('string');\r",
									"    pm.collectionVariables.set(\"updatedAt\", pm.response.json().updatedAt);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}users/",
						"description": "### Add User\n\nThis endpoint allows you to add a new user to the system.\n\n#### Request Body\n\n- `firstName` (string, required): The first name of the user.\n    \n- `lastName` (string, required): The last name of the user.\n    \n- `email` (string, required): The email address of the user.\n    \n\nExample:\n\n``` json\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"johndoe@example.com\"\n}\n\n ```\n\n#### Response\n\n- `firstName` (string): The first name of the user.\n    \n- `lastName` (string): The last name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `createdAt` (string): The timestamp when the user was created.\n    \n- `updatedAt` (string): The timestamp when the user was last updated.\n    \n- `id` (integer): The unique identifier of the user.\n    \n\nExample:\n\n``` json\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"johndoe@example.com\",\n  \"createdAt\": \"2022-01-01T12:00:00Z\",\n  \"updatedAt\": \"2022-01-01T12:00:00Z\",\n  \"id\": 12345\n}\n\n ```"
					},
					"response": [
						{
							"name": "3.2 Create A new User",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/users/"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "195"
								},
								{
									"key": "ETag",
									"value": "W/\"c3-7XAfHsvsBHw7KJMS75qBZKGvtxo\""
								},
								{
									"key": "Date",
									"value": "Sat, 10 May 2025 03:46:20 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"firstName\": \"Erica\",\n    \"lastName\": \"Schiller\",\n    \"email\": \"Elizabeth.Mosciski85@yahoo.com\",\n    \"createdAt\": \"2025-05-10T03:46:20.606Z\",\n    \"updatedAt\": \"2025-05-10T03:46:20.606Z\",\n    \"id\": 69\n}"
						}
					]
				},
				{
					"name": "3.2 Get A Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[1.1] TC01 Validate Response Code For Adding New Book is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.have.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC02 Validate Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"[1.1] TC03 Validate Check Login response body contain Id\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"id\")\r",
									"});\r",
									"pm.test(\"[1.1] TC04 Validate Check Login response body contain Id not null\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC05 Validate Check Login response body contain Id not empty\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.undefined\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC06 Validate Check Id type equal number and value is same as post request\", function () {\r",
									"    pm.expect(typeof pm.response.json().id).to.be.equal('number')\r",
									"    pm.expect(pm.response.json().id).to.eql(pm.collectionVariables.get(\"userId\"));\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC08 Validate TC05 Validate Response Schema is Valid\", function () {\r",
									"    var schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"firstName\": { \"type\": \"string\" },\r",
									"            \"lastName\": { \"type\": \"string\" },\r",
									"            \"email\": { \"type\": \"string\" },\r",
									"            \"createdAt\": { \"type\": \"string\" },\r",
									"            \"updatedAt\": { \"type\": \"string\" },\r",
									"            \"id\": { \"type\": \"integer\" }\r",
									"        },\r",
									"        \"required\": [\"firstName\", \"lastName\", \"email\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC09 Validate Check firstName is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().firstName).to.not.be.null;\r",
									"    pm.expect(pm.response.json().firstName).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().firstName).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().firstName).to.be.eql(\"string\");\r",
									"    // pm.expect(pm.response.json().firstName).to.eql(JSON.parse(pm.request.body.raw).firstName)\r",
									"    pm.collectionVariables.set(\"firstName\", pm.response.json().firstName);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC10 Validate Check lastName is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().lastName).to.not.be.null;\r",
									"    pm.expect(pm.response.json().lastName).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().lastName).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().lastName).to.be.eql(\"string\");\r",
									"    // pm.expect(pm.response.json().lastName).to.eql(JSON.parse(pm.request.body.raw).lastName)\r",
									"    pm.collectionVariables.set(\"lastName\", pm.response.json().lastName);\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC11 Validate Check isbn is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().email).to.not.be.null;\r",
									"    pm.expect(pm.response.json().email).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().email).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().email).to.be.eql(\"string\");\r",
									"    // pm.expect(pm.response.json().email).to.eql(JSON.parse(pm.request.body.raw).email)\r",
									"    pm.collectionVariables.set(\"email\", pm.response.json().email);\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC13 Validate Check createdAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().createdAt).to.be.eql('string');\r",
									"    pm.collectionVariables.set(\"createdAt\", pm.response.json().createdAt);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC14 Validate Check updatedAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().updatedAt).to.be.an('string');\r",
									"    pm.collectionVariables.set(\"updatedAt\", pm.response.json().updatedAt);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}users/:id",
							"host": [
								"{{baseURL}}users"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						},
						"description": "### Get User Details\n\nThis endpoint retrieves the details of a specific user identified by their unique ID.\n\n#### Request\n\n- Method: GET\n    \n- Endpoint: `{{baseURL}}users/:id`\n    \n\n#### Response\n\nThe response will be a JSON object with the following schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"firstName\": { \"type\": \"string\" },\n    \"lastName\": { \"type\": \"string\" },\n    \"email\": { \"type\": \"string\" },\n    \"createdAt\": { \"type\": \"string\" },\n    \"updatedAt\": { \"type\": \"string\" },\n    \"id\": { \"type\": \"integer\" }\n  }\n}\n\n ```"
					},
					"response": [
						{
							"name": "3.1 Get A Users",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/users/:id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{userId}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "195"
								},
								{
									"key": "ETag",
									"value": "W/\"c3-7XAfHsvsBHw7KJMS75qBZKGvtxo\""
								},
								{
									"key": "Date",
									"value": "Sat, 10 May 2025 03:46:48 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"firstName\": \"Erica\",\n    \"lastName\": \"Schiller\",\n    \"email\": \"Elizabeth.Mosciski85@yahoo.com\",\n    \"createdAt\": \"2025-05-10T03:46:20.606Z\",\n    \"updatedAt\": \"2025-05-10T03:46:20.606Z\",\n    \"id\": 69\n}"
						}
					]
				},
				{
					"name": "3.3 Update A User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[1.1] TC01 Validate Response Code For Adding New Book is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.have.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC02 Validate Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"[1.1] TC03 Validate Check Login response body contain Id\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"id\")\r",
									"});\r",
									"pm.test(\"[1.1] TC04 Validate Check Login response body contain Id not null\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC05 Validate Check Login response body contain Id not empty\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.undefined\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC06 Validate Check Id type number\", function () {\r",
									"    pm.expect(typeof pm.response.json().id).to.be.equal('number')\r",
									"});\r",
									"\r",
									"// Set the 'id' from the response in a collection variable\r",
									"pm.test(\"[1.1] TC07 Validate Set the 'id' from the response in a collection variable\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"userId\", responseData.id);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC08 Validate Response Schema is Valid\", function () {\r",
									"    var schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"firstName\": { \"type\": \"string\" },\r",
									"            \"lastName\": { \"type\": \"string\" },\r",
									"            \"email\": { \"type\": \"string\" },\r",
									"            \"createdAt\": { \"type\": \"string\" },\r",
									"            \"updatedAt\": { \"type\": \"string\" },\r",
									"            \"id\": { \"type\": \"integer\" }\r",
									"        },\r",
									"        \"required\": [\"firstName\", \"lastName\", \"email\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC09 Validate Check firstName is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().firstName).to.not.be.null;\r",
									"    pm.expect(pm.response.json().firstName).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().firstName).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().firstName).to.be.eql(\"string\");\r",
									"    pm.expect(pm.response.json().firstName).to.eql(JSON.parse(pm.request.body.raw).firstName)\r",
									"    pm.collectionVariables.set(\"firstName\", pm.response.json().firstName);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC10 Validate Check lastName is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().lastName).to.not.be.null;\r",
									"    pm.expect(pm.response.json().lastName).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().lastName).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().lastName).to.be.eql(\"string\");\r",
									"    pm.expect(pm.response.json().lastName).to.eql(JSON.parse(pm.request.body.raw).lastName)\r",
									"    pm.collectionVariables.set(\"lastName\", pm.response.json().lastName);\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC11 Validate Check isbn is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().email).to.not.be.null;\r",
									"    pm.expect(pm.response.json().email).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().email).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().email).to.be.eql(\"string\");\r",
									"    pm.expect(pm.response.json().email).to.eql(JSON.parse(pm.request.body.raw).email)\r",
									"    pm.collectionVariables.set(\"email\", pm.response.json().email);\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC13 Validate Check createdAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().createdAt).to.be.eql('string');\r",
									"    pm.collectionVariables.set(\"createdAt\", pm.response.json().createdAt);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC14 Validate Check updatedAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().updatedAt).to.be.an('string');\r",
									"    pm.collectionVariables.set(\"updatedAt\", pm.response.json().updatedAt);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}users/:id",
							"host": [
								"{{baseURL}}users"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						},
						"description": "### Update User Details\n\nThis endpoint allows the client to update the details of a specific user.\n\n#### Request Parameters\n\n- `firstName` (string, required): The first name of the user.\n    \n- `lastName` (string, required): The last name of the user.\n    \n- `email` (string, required): The email address of the user.\n    \n\n#### Response\n\nThe response will be a JSON object with the following properties:\n\n- `firstName` (string): The updated first name of the user.\n    \n- `lastName` (string): The updated last name of the user.\n    \n- `email` (string): The updated email address of the user.\n    \n- `createdAt` (string): The timestamp of when the user was created.\n    \n- `updatedAt` (string): The timestamp of when the user was last updated.\n    \n- `id` (integer): The unique identifier of the user.\n    \n\n#### JSON Schema\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"firstName\": { \"type\": \"string\" },\n    \"lastName\": { \"type\": \"string\" },\n    \"email\": { \"type\": \"string\" },\n    \"createdAt\": { \"type\": \"string\" },\n    \"updatedAt\": { \"type\": \"string\" },\n    \"id\": { \"type\": \"integer\" }\n  }\n}\n\n ```"
					},
					"response": [
						{
							"name": "3.3 Update A User",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/users/:id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{userId}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "179"
								},
								{
									"key": "ETag",
									"value": "W/\"b3-djuW76eQQ7IYkJkadakXcXGOmj8\""
								},
								{
									"key": "Date",
									"value": "Sat, 10 May 2025 03:47:05 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"firstName\": \"Lia\",\n    \"lastName\": \"Batz\",\n    \"email\": \"Jennings44@gmail.com\",\n    \"createdAt\": \"2025-05-10T03:46:20.606Z\",\n    \"updatedAt\": \"2025-05-10T03:47:05.238Z\",\n    \"id\": 69\n}"
						}
					]
				},
				{
					"name": "3.4 Get A Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[1.1] TC01 Validate Response Code For Adding New Book is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.have.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC02 Validate Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"[1.1] TC03 Validate Check Login response body contain Id\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"id\")\r",
									"});\r",
									"pm.test(\"[1.1] TC04 Validate Check Login response body contain Id not null\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC05 Validate Check Login response body contain Id not empty\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.undefined\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC06 Validate Check Id type equal number and value is same as post request\", function () {\r",
									"    pm.expect(typeof pm.response.json().id).to.be.equal('number')\r",
									"    pm.expect(pm.response.json().id).to.eql(pm.collectionVariables.get(\"userId\"));\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC08 Validate TC05 Validate Response Schema is Valid\", function () {\r",
									"    var schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"firstName\": { \"type\": \"string\" },\r",
									"            \"lastName\": { \"type\": \"string\" },\r",
									"            \"email\": { \"type\": \"string\" },\r",
									"            \"createdAt\": { \"type\": \"string\" },\r",
									"            \"updatedAt\": { \"type\": \"string\" },\r",
									"            \"id\": { \"type\": \"integer\" }\r",
									"        },\r",
									"        \"required\": [\"firstName\", \"lastName\", \"email\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC09 Validate Check firstName is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().firstName).to.not.be.null;\r",
									"    pm.expect(pm.response.json().firstName).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().firstName).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().firstName).to.be.eql(\"string\");\r",
									"    // pm.expect(pm.response.json().firstName).to.eql(JSON.parse(pm.request.body.raw).firstName)\r",
									"    pm.collectionVariables.set(\"firstName\", pm.response.json().firstName);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC10 Validate Check lastName is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().lastName).to.not.be.null;\r",
									"    pm.expect(pm.response.json().lastName).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().lastName).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().lastName).to.be.eql(\"string\");\r",
									"    // pm.expect(pm.response.json().lastName).to.eql(JSON.parse(pm.request.body.raw).lastName)\r",
									"    pm.collectionVariables.set(\"lastName\", pm.response.json().lastName);\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC11 Validate Check isbn is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().email).to.not.be.null;\r",
									"    pm.expect(pm.response.json().email).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().email).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().email).to.be.eql(\"string\");\r",
									"    // pm.expect(pm.response.json().email).to.eql(JSON.parse(pm.request.body.raw).email)\r",
									"    pm.collectionVariables.set(\"email\", pm.response.json().email);\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC13 Validate Check createdAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().createdAt).to.be.eql('string');\r",
									"    pm.collectionVariables.set(\"createdAt\", pm.response.json().createdAt);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC14 Validate Check updatedAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().updatedAt).to.be.an('string');\r",
									"    pm.collectionVariables.set(\"updatedAt\", pm.response.json().updatedAt);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}users/:id",
							"host": [
								"{{baseURL}}users"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						},
						"description": "### Retrieve User Details\n\nThis endpoint retrieves the details of a specific user identified by their unique ID.\n\n#### Request\n\n- Method: GET\n    \n- Endpoint: `{{baseURL}}users/:id`\n    \n\n#### Response\n\nThe response will be a JSON object with the following properties:\n\n- `firstName` (string): The first name of the user.\n    \n- `lastName` (string): The last name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `createdAt` (string): The timestamp indicating when the user was created.\n    \n- `updatedAt` (string): The timestamp indicating when the user was last updated.\n    \n- `id` (integer): The unique identifier of the user.\n    \n\n#### Request Body\n\nThis request does not require a request body."
					},
					"response": [
						{
							"name": "3.1 Get A Users",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/users/:id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{userId}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "179"
								},
								{
									"key": "ETag",
									"value": "W/\"b3-djuW76eQQ7IYkJkadakXcXGOmj8\""
								},
								{
									"key": "Date",
									"value": "Sat, 10 May 2025 03:47:26 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"firstName\": \"Lia\",\n    \"lastName\": \"Batz\",\n    \"email\": \"Jennings44@gmail.com\",\n    \"createdAt\": \"2025-05-10T03:46:20.606Z\",\n    \"updatedAt\": \"2025-05-10T03:47:05.238Z\",\n    \"id\": 69\n}"
						}
					]
				},
				{
					"name": "3.5 Partially Update A User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[1.1] TC01 Validate Response Code For Adding New Book is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.have.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC02 Validate Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"[1.1] TC03 Validate Check Login response body contain Id\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"id\")\r",
									"});\r",
									"pm.test(\"[1.1] TC04 Validate Check Login response body contain Id not null\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC05 Validate Check Login response body contain Id not empty\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.undefined\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC06 Validate Check Id type equal number and value is same as post request\", function () {\r",
									"    pm.expect(typeof pm.response.json().id).to.be.equal('number')\r",
									"    pm.expect(pm.response.json().id).to.eql(pm.collectionVariables.get(\"userId\"));\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC08 Validate TC05 Validate Response Schema is Valid\", function () {\r",
									"    var schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"firstName\": { \"type\": \"string\" },\r",
									"            \"lastName\": { \"type\": \"string\" },\r",
									"            \"email\": { \"type\": \"string\" },\r",
									"            \"createdAt\": { \"type\": \"string\" },\r",
									"            \"updatedAt\": { \"type\": \"string\" },\r",
									"            \"id\": { \"type\": \"integer\" }\r",
									"        },\r",
									"        \"required\": [\"firstName\", \"lastName\", \"email\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC09 Validate Check firstName is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().firstName).to.not.be.null;\r",
									"    pm.expect(pm.response.json().firstName).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().firstName).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().firstName).to.be.eql(\"string\");\r",
									"    // pm.expect(pm.response.json().firstName).to.eql(JSON.parse(pm.request.body.raw).firstName)\r",
									"    pm.collectionVariables.set(\"firstName\", pm.response.json().firstName);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC10 Validate Check lastName is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().lastName).to.not.be.null;\r",
									"    pm.expect(pm.response.json().lastName).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().lastName).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().lastName).to.be.eql(\"string\");\r",
									"    // pm.expect(pm.response.json().lastName).to.eql(JSON.parse(pm.request.body.raw).lastName)\r",
									"    pm.collectionVariables.set(\"lastName\", pm.response.json().lastName);\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC11 Validate Check isbn is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().email).to.not.be.null;\r",
									"    pm.expect(pm.response.json().email).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().email).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().email).to.be.eql(\"string\");\r",
									"    // pm.expect(pm.response.json().email).to.eql(JSON.parse(pm.request.body.raw).email)\r",
									"    pm.collectionVariables.set(\"email\", pm.response.json().email);\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC13 Validate Check createdAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().createdAt).to.be.eql('string');\r",
									"    pm.collectionVariables.set(\"createdAt\", pm.response.json().createdAt);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC14 Validate Check updatedAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().updatedAt).to.be.an('string');\r",
									"    pm.collectionVariables.set(\"updatedAt\", pm.response.json().updatedAt);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}users/:id",
							"host": [
								"{{baseURL}}users"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						},
						"description": "# Update User Details\n\nThis endpoint is used to update the details of a specific user.\n\n### Request\n\n- Method: `PATCH`\n    \n- URL: `{{baseURL}}users/:id`\n    \n- Headers:\n    \n    - Content-Type: application/json\n        \n- { \"firstName\": \"{{$randomFirstName}}\", \"lastName\": \"{{$randomLastName}}\", \"email\": \"{{$randomEmail}}\"}\n    \n\n### Response\n\nThe response for this request is a JSON object with the following schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"firstName\": {\n      \"type\": \"string\"\n    },\n    \"lastName\": {\n      \"type\": \"string\"\n    },\n    \"email\": {\n      \"type\": \"string\"\n    },\n    \"createdAt\": {\n      \"type\": \"string\"\n    },\n    \"updatedAt\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"integer\"\n    }\n  }\n}\n\n ```"
					},
					"response": [
						{
							"name": "3.3 Partially Update A User",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/users/:id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{userId}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "188"
								},
								{
									"key": "ETag",
									"value": "W/\"bc-FvI6wmtzhArWUEHkhrj0L3V1I84\""
								},
								{
									"key": "Date",
									"value": "Sat, 10 May 2025 03:47:44 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"firstName\": \"Kory\",\n    \"lastName\": \"Ondricka\",\n    \"email\": \"Hailey.Monahan@yahoo.com\",\n    \"createdAt\": \"2025-05-10T03:46:20.606Z\",\n    \"updatedAt\": \"2025-05-10T03:47:05.238Z\",\n    \"id\": 69\n}"
						}
					]
				},
				{
					"name": "3.6 Get A Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[1.1] TC01 Validate Response Code For Adding New Book is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.have.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC02 Validate Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"[1.1] TC03 Validate Check Login response body contain Id\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"id\")\r",
									"});\r",
									"pm.test(\"[1.1] TC04 Validate Check Login response body contain Id not null\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC05 Validate Check Login response body contain Id not empty\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.undefined\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC06 Validate Check Id type equal number and value is same as post request\", function () {\r",
									"    pm.expect(typeof pm.response.json().id).to.be.equal('number')\r",
									"    pm.expect(pm.response.json().id).to.eql(pm.collectionVariables.get(\"userId\"));\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC08 Validate TC05 Validate Response Schema is Valid\", function () {\r",
									"    var schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"firstName\": { \"type\": \"string\" },\r",
									"            \"lastName\": { \"type\": \"string\" },\r",
									"            \"email\": { \"type\": \"string\" },\r",
									"            \"createdAt\": { \"type\": \"string\" },\r",
									"            \"updatedAt\": { \"type\": \"string\" },\r",
									"            \"id\": { \"type\": \"integer\" }\r",
									"        },\r",
									"        \"required\": [\"firstName\", \"lastName\", \"email\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC09 Validate Check firstName is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().firstName).to.not.be.null;\r",
									"    pm.expect(pm.response.json().firstName).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().firstName).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().firstName).to.be.eql(\"string\");\r",
									"    // pm.expect(pm.response.json().firstName).to.eql(JSON.parse(pm.request.body.raw).firstName)\r",
									"    pm.collectionVariables.set(\"firstName\", pm.response.json().firstName);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC10 Validate Check lastName is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().lastName).to.not.be.null;\r",
									"    pm.expect(pm.response.json().lastName).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().lastName).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().lastName).to.be.eql(\"string\");\r",
									"    // pm.expect(pm.response.json().lastName).to.eql(JSON.parse(pm.request.body.raw).lastName)\r",
									"    pm.collectionVariables.set(\"lastName\", pm.response.json().lastName);\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC11 Validate Check isbn is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().email).to.not.be.null;\r",
									"    pm.expect(pm.response.json().email).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().email).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().email).to.be.eql(\"string\");\r",
									"    // pm.expect(pm.response.json().email).to.eql(JSON.parse(pm.request.body.raw).email)\r",
									"    pm.collectionVariables.set(\"email\", pm.response.json().email);\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC13 Validate Check createdAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().createdAt).to.be.eql('string');\r",
									"    pm.collectionVariables.set(\"createdAt\", pm.response.json().createdAt);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC14 Validate Check updatedAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().updatedAt).to.be.an('string');\r",
									"    pm.collectionVariables.set(\"updatedAt\", pm.response.json().updatedAt);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}users/:id",
							"host": [
								"{{baseURL}}users"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						},
						"description": "### Retrieve User Details\n\nThis endpoint retrieves the details of a specific user identified by their unique ID.\n\n#### Request\n\n- Method: GET\n    \n- URL: `{{baseURL}}users/:id`\n    \n\n#### Response\n\nThe response will be a JSON object with the following schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"firstName\": { \"type\": \"string\" },\n    \"lastName\": { \"type\": \"string\" },\n    \"email\": { \"type\": \"string\" },\n    \"createdAt\": { \"type\": \"string\" },\n    \"updatedAt\": { \"type\": \"string\" },\n    \"id\": { \"type\": \"number\" }\n  }\n}\n\n ```"
					},
					"response": [
						{
							"name": "3.1 Get A Users",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/users/:id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{userId}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "188"
								},
								{
									"key": "ETag",
									"value": "W/\"bc-FvI6wmtzhArWUEHkhrj0L3V1I84\""
								},
								{
									"key": "Date",
									"value": "Sat, 10 May 2025 03:48:17 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"firstName\": \"Kory\",\n    \"lastName\": \"Ondricka\",\n    \"email\": \"Hailey.Monahan@yahoo.com\",\n    \"createdAt\": \"2025-05-10T03:46:20.606Z\",\n    \"updatedAt\": \"2025-05-10T03:47:05.238Z\",\n    \"id\": 69\n}"
						}
					]
				},
				{
					"name": "3.7 Delete A User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[1.8] TC01 Validate Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.8] TC02 Validate Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.8] TC03 Validate Check response body to not contain bookId\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"userId\");\r",
									"});\r",
									"\r",
									"pm.test(\"[1.8] TC04 Validate Status code is 200 or 204\", function () {\r",
									"    pm.expect([200, 204]).to.include(pm.response.code);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"password": "admin",
								"username": "admin"
							}
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}users/:id",
							"host": [
								"{{baseURL}}users"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						},
						"description": "### Delete User\n\nThis endpoint is used to delete a specific user by providing the user ID in the URL.\n\n**Request Body**  \nThis request does not require a request body.\n\n**Response**  \nThe response for this request is null, indicating that no content is returned upon successful deletion of the user."
					},
					"response": [
						{
							"name": "1.6 Delete A User",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/users/:id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{userId}}"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Date",
									"value": "Sat, 10 May 2025 03:48:33 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "3.8 Get A Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[2.1] TC01 Validate Response Code For Adding New Book is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.have.equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.1] TC02 Validate Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"[2.1] TC03 Validate Check Login response body contain Id\", function () {\r",
									"    pm.expect(pm.response.json()).to.not.have.property(\"id\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}users/:id",
							"host": [
								"{{baseURL}}users"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						},
						"description": "This endpoint retrieves the details of a specific user identified by their ID. The request does not include a request body, as it is a GET request. The response will include the user's details such as their name, email, and any other relevant information associated with the user ID."
					},
					"response": [
						{
							"name": "3.1 Get A Users",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/users/:id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{userId}}"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "33"
								},
								{
									"key": "ETag",
									"value": "W/\"21-ZGVnntUV23OO3IYyawjFZsL32fI\""
								},
								{
									"key": "Date",
									"value": "Sat, 10 May 2025 03:48:48 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"User not found\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "4- Wishlists",
			"item": [
				{
					"name": "4.1 Create A new Wishlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[1.1] TC01 Validate Response Code For Adding New Book is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.have.equal(201);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC02 Validate Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"[1.1] TC03 Validate Check Login response body contain Id\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"id\")\r",
									"});\r",
									"pm.test(\"[1.1] TC04 Validate Check Login response body contain Id not null\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC05 Validate Check Login response body contain Id not empty\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.undefined\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC06 Validate Check Id type number\", function () {\r",
									"    pm.expect(typeof pm.response.json().id).to.be.equal('number')\r",
									"});\r",
									"\r",
									"// Set the 'id' from the response in a collection variable\r",
									"pm.test(\"[1.1] TC07 Validate Set the 'id' from the response in a collection variable\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"whishlistId\", responseData.id);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC08 Validate Response Schema is Valid\", function () {\r",
									"    var schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"firstName\": { \"type\": \"string\" },\r",
									"            \"lastName\": { \"type\": \"string\" },\r",
									"            \"email\": { \"type\": \"string\" },\r",
									"            \"createdAt\": { \"type\": \"string\" },\r",
									"            \"updatedAt\": { \"type\": \"string\" },\r",
									"            \"id\": { \"type\": \"integer\" }\r",
									"        },\r",
									"        \"required\": [\"firstName\", \"lastName\", \"email\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC09 Validate Check firstName is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().firstName).to.not.be.null;\r",
									"    pm.expect(pm.response.json().firstName).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().firstName).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().firstName).to.be.eql(\"string\");\r",
									"    pm.expect(pm.response.json().firstName).to.eql(JSON.parse(pm.request.body.raw).firstName)\r",
									"    pm.collectionVariables.set(\"firstName\", pm.response.json().firstName);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC10 Validate Check lastName is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().lastName).to.not.be.null;\r",
									"    pm.expect(pm.response.json().lastName).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().lastName).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().lastName).to.be.eql(\"string\");\r",
									"    pm.expect(pm.response.json().lastName).to.eql(JSON.parse(pm.request.body.raw).lastName)\r",
									"    pm.collectionVariables.set(\"lastName\", pm.response.json().lastName);\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC11 Validate Check isbn is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().email).to.not.be.null;\r",
									"    pm.expect(pm.response.json().email).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().email).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().email).to.be.eql(\"string\");\r",
									"    pm.expect(pm.response.json().email).to.eql(JSON.parse(pm.request.body.raw).email)\r",
									"    pm.collectionVariables.set(\"email\", pm.response.json().email);\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC13 Validate Check createdAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().createdAt).to.be.eql('string');\r",
									"    pm.collectionVariables.set(\"createdAt\", pm.response.json().createdAt);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC14 Validate Check updatedAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().updatedAt).to.be.an('string');\r",
									"    pm.collectionVariables.set(\"updatedAt\", pm.response.json().updatedAt);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}wishlists",
						"description": "\n## Create Wishlist\n\nThis endpoint allows you to create a new wishlist by providing the first name, last name, and email of the user.\n\n### Request Body\n- `firstName` (string, required): The first name of the user.\n- `lastName` (string, required): The last name of the user.\n- `email` (string, required): The email of the user.\n\nExample:\n```json\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"johndoe@example.com\"\n}\n```\n\n### Response\n- `firstName` (string): The first name of the user.\n- `lastName` (string): The last name of the user.\n- `email` (string): The email of the user.\n- `createdAt` (string): The timestamp when the wishlist was created.\n- `updatedAt` (string): The timestamp when the wishlist was last updated.\n- `id` (integer): The unique identifier of the wishlist.\n\nExample:\n```json\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"johndoe@example.com\",\n  \"createdAt\": \"2022-01-01T12:00:00Z\",\n  \"updatedAt\": \"2022-01-01T12:00:00Z\",\n  \"id\": 123\n}\n"
					},
					"response": [
						{
							"name": "4.1 Create A new Wishlist",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/wishlists"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "184"
								},
								{
									"key": "ETag",
									"value": "W/\"b8-uzc+czlDxLK03emnk4lGmUWKNc4\""
								},
								{
									"key": "Date",
									"value": "Sat, 10 May 2025 03:49:06 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"firstName\": \"Ambrose\",\n    \"lastName\": \"Koch\",\n    \"email\": \"Jessika28@hotmail.com\",\n    \"createdAt\": \"2025-05-10T03:49:06.278Z\",\n    \"updatedAt\": \"2025-05-10T03:49:06.278Z\",\n    \"id\": 43\n}"
						}
					]
				},
				{
					"name": "4.2 Get A Wishlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[1.1] TC01 Validate Response Code For Adding New Book is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.have.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC02 Validate Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"[1.1] TC03 Validate Check Login response body contain Id\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"id\")\r",
									"});\r",
									"pm.test(\"[1.1] TC04 Validate Check Login response body contain Id not null\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC05 Validate Check Login response body contain Id not empty\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.undefined\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC06 Validate Check Id type equal number and value is same as post request\", function () {\r",
									"    pm.expect(typeof pm.response.json().id).to.be.equal('number')\r",
									"    pm.expect(pm.response.json().id).to.eql(pm.collectionVariables.get(\"whishlistId\"));\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC08 Validate TC05 Validate Response Schema is Valid\", function () {\r",
									"    var schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"firstName\": { \"type\": \"string\" },\r",
									"            \"lastName\": { \"type\": \"string\" },\r",
									"            \"email\": { \"type\": \"string\" },\r",
									"            \"createdAt\": { \"type\": \"string\" },\r",
									"            \"updatedAt\": { \"type\": \"string\" },\r",
									"            \"id\": { \"type\": \"integer\" }\r",
									"        },\r",
									"        \"required\": [\"firstName\", \"lastName\", \"email\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC09 Validate Check firstName is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().firstName).to.not.be.null;\r",
									"    pm.expect(pm.response.json().firstName).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().firstName).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().firstName).to.be.eql(\"string\");\r",
									"    // pm.expect(pm.response.json().firstName).to.eql(JSON.parse(pm.request.body.raw).firstName)\r",
									"    pm.collectionVariables.set(\"firstName\", pm.response.json().firstName);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC10 Validate Check lastName is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().lastName).to.not.be.null;\r",
									"    pm.expect(pm.response.json().lastName).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().lastName).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().lastName).to.be.eql(\"string\");\r",
									"    // pm.expect(pm.response.json().lastName).to.eql(JSON.parse(pm.request.body.raw).lastName)\r",
									"    pm.collectionVariables.set(\"lastName\", pm.response.json().lastName);\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC11 Validate Check isbn is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().email).to.not.be.null;\r",
									"    pm.expect(pm.response.json().email).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().email).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().email).to.be.eql(\"string\");\r",
									"    // pm.expect(pm.response.json().email).to.eql(JSON.parse(pm.request.body.raw).email)\r",
									"    pm.collectionVariables.set(\"email\", pm.response.json().email);\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC13 Validate Check createdAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().createdAt).to.be.eql('string');\r",
									"    pm.collectionVariables.set(\"createdAt\", pm.response.json().createdAt);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC14 Validate Check updatedAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().updatedAt).to.be.an('string');\r",
									"    pm.collectionVariables.set(\"updatedAt\", pm.response.json().updatedAt);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}wishlists/:id",
							"host": [
								"{{baseURL}}wishlists"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{whishlistId}}"
								}
							]
						},
						"description": "# Get Wishlist Details\n\nThis endpoint retrieves the details of a specific wishlist based on the provided wishlist ID.\n\n## Request\n\n### Request URL\n\n- `GET` {{baseURL}}wishlists/:id\n    \n\n### Request Body\n\nThis request does not require a request body.\n\n### Request Parameters\n\n- `id` (path) - The ID of the wishlist to retrieve.\n    \n\n## Response\n\n### Response Body\n\nThe response will contain the details of the wishlist in JSON format, including the following fields:\n\n- `firstName` (string) - The first name associated with the wishlist.\n    \n- `lastName` (string) - The last name associated with the wishlist.\n    \n- `email` (string) - The email associated with the wishlist.\n    \n- `createdAt` (string) - The timestamp indicating when the wishlist was created.\n    \n- `updatedAt` (string) - The timestamp indicating when the wishlist was last updated.\n    \n- `id` (integer) - The unique identifier of the wishlist."
					},
					"response": [
						{
							"name": "4.2 Get A Wishlist",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/wishlists/:id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"wishlists",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{whishlistId}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "184"
								},
								{
									"key": "ETag",
									"value": "W/\"b8-uzc+czlDxLK03emnk4lGmUWKNc4\""
								},
								{
									"key": "Date",
									"value": "Sat, 10 May 2025 03:49:21 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"firstName\": \"Ambrose\",\n    \"lastName\": \"Koch\",\n    \"email\": \"Jessika28@hotmail.com\",\n    \"createdAt\": \"2025-05-10T03:49:06.278Z\",\n    \"updatedAt\": \"2025-05-10T03:49:06.278Z\",\n    \"id\": 43\n}"
						}
					]
				},
				{
					"name": "4.3 Update A Wishlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[1.1] TC01 Validate Response Code For Adding New Book is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.have.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC02 Validate Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"[1.1] TC03 Validate Check Login response body contain Id\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"id\")\r",
									"});\r",
									"pm.test(\"[1.1] TC04 Validate Check Login response body contain Id not null\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC05 Validate Check Login response body contain Id not empty\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.undefined\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC06 Validate Check Id type number\", function () {\r",
									"    pm.expect(typeof pm.response.json().id).to.be.equal('number')\r",
									"});\r",
									"\r",
									"// Set the 'id' from the response in a collection variable\r",
									"pm.test(\"[1.1] TC07 Validate Set the 'id' from the response in a collection variable\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"whishlistId\", responseData.id);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC08 Validate Response Schema is Valid\", function () {\r",
									"    var schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"firstName\": { \"type\": \"string\" },\r",
									"            \"lastName\": { \"type\": \"string\" },\r",
									"            \"email\": { \"type\": \"string\" },\r",
									"            \"createdAt\": { \"type\": \"string\" },\r",
									"            \"updatedAt\": { \"type\": \"string\" },\r",
									"            \"id\": { \"type\": \"integer\" }\r",
									"        },\r",
									"        \"required\": [\"firstName\", \"lastName\", \"email\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC09 Validate Check firstName is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().firstName).to.not.be.null;\r",
									"    pm.expect(pm.response.json().firstName).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().firstName).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().firstName).to.be.eql(\"string\");\r",
									"    // pm.expect(pm.response.json().firstName).to.eql(JSON.parse(pm.request.body.raw).firstName)\r",
									"    pm.collectionVariables.set(\"firstName\", pm.response.json().firstName);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC10 Validate Check lastName is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().lastName).to.not.be.null;\r",
									"    pm.expect(pm.response.json().lastName).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().lastName).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().lastName).to.be.eql(\"string\");\r",
									"    // pm.expect(pm.response.json().lastName).to.eql(JSON.parse(pm.request.body.raw).lastName)\r",
									"    pm.collectionVariables.set(\"lastName\", pm.response.json().lastName);\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC11 Validate Check isbn is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().email).to.not.be.null;\r",
									"    pm.expect(pm.response.json().email).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().email).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().email).to.be.eql(\"string\");\r",
									"    // pm.expect(pm.response.json().email).to.eql(JSON.parse(pm.request.body.raw).email)\r",
									"    pm.collectionVariables.set(\"email\", pm.response.json().email);\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC13 Validate Check createdAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().createdAt).to.be.eql('string');\r",
									"    pm.collectionVariables.set(\"createdAt\", pm.response.json().createdAt);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC14 Validate Check updatedAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().updatedAt).to.be.an('string');\r",
									"    pm.collectionVariables.set(\"updatedAt\", pm.response.json().updatedAt);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}wishlists/:id",
							"host": [
								"{{baseURL}}wishlists"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{whishlistId}}"
								}
							]
						},
						"description": "\nThis endpoint allows you to update a specific wishlist by providing the wishlist ID in the URL. The request should include the updated details of the wishlist in the request body.\n\n### Request Body\n- `firstName` (string, optional): The first name of the person associated with the wishlist.\n- `lastName` (string, optional): The last name of the person associated with the wishlist.\n- `email` (string, optional): The email address of the person associated with the wishlist.\n\n### Response\nUpon a successful update, the response will include the updated details of the wishlist, such as:\n- `firstName` (string): The first name of the person associated with the wishlist.\n- `lastName` (string): The last name of the person associated with the wishlist.\n- `email` (string): The email address of the person associated with the wishlist.\n- `createdAt` (string): The timestamp of when the wishlist was created.\n- `updatedAt` (string): The timestamp of when the wishlist was last updated.\n- `id` (integer): The unique identifier of the wishlist.\n\nIf the update is unsuccessful, an appropriate error message will be returned.\n"
					},
					"response": [
						{
							"name": "4.3 Update A Wishlist",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/wishlists/:id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"wishlists",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{whishlistId}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "184"
								},
								{
									"key": "ETag",
									"value": "W/\"b8-Cj4L0r98WlwneQAOalg+cwyNhd8\""
								},
								{
									"key": "Date",
									"value": "Sat, 10 May 2025 03:49:36 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"firstName\": \"Ambrose\",\n    \"lastName\": \"Koch\",\n    \"email\": \"Jessika28@hotmail.com\",\n    \"createdAt\": \"2025-05-10T03:49:06.278Z\",\n    \"updatedAt\": \"2025-05-10T03:49:36.878Z\",\n    \"id\": 43\n}"
						}
					]
				},
				{
					"name": "4.4 Get A Wishlist Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[1.1] TC01 Validate Response Code For Adding New Book is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.have.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC02 Validate Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"[1.1] TC03 Validate Check Login response body contain Id\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"id\")\r",
									"});\r",
									"pm.test(\"[1.1] TC04 Validate Check Login response body contain Id not null\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC05 Validate Check Login response body contain Id not empty\", function () {\r",
									"    pm.expect(pm.response.json().id).to.not.be.undefined\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC06 Validate Check Id type equal number and value is same as post request\", function () {\r",
									"    pm.expect(typeof pm.response.json().id).to.be.equal('number')\r",
									"    pm.expect(pm.response.json().id).to.eql(pm.collectionVariables.get(\"whishlistId\"));\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC08 Validate TC05 Validate Response Schema is Valid\", function () {\r",
									"    var schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"firstName\": { \"type\": \"string\" },\r",
									"            \"lastName\": { \"type\": \"string\" },\r",
									"            \"email\": { \"type\": \"string\" },\r",
									"            \"createdAt\": { \"type\": \"string\" },\r",
									"            \"updatedAt\": { \"type\": \"string\" },\r",
									"            \"id\": { \"type\": \"integer\" }\r",
									"        },\r",
									"        \"required\": [\"firstName\", \"lastName\", \"email\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC09 Validate Check firstName is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().firstName).to.not.be.null;\r",
									"    pm.expect(pm.response.json().firstName).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().firstName).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().firstName).to.be.eql(\"string\");\r",
									"    // pm.expect(pm.response.json().firstName).to.eql(JSON.parse(pm.request.body.raw).firstName)\r",
									"    pm.collectionVariables.set(\"firstName\", pm.response.json().firstName);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC10 Validate Check lastName is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().lastName).to.not.be.null;\r",
									"    pm.expect(pm.response.json().lastName).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().lastName).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().lastName).to.be.eql(\"string\");\r",
									"    // pm.expect(pm.response.json().lastName).to.eql(JSON.parse(pm.request.body.raw).lastName)\r",
									"    pm.collectionVariables.set(\"lastName\", pm.response.json().lastName);\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC11 Validate Check isbn is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().email).to.not.be.null;\r",
									"    pm.expect(pm.response.json().email).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().email).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().email).to.be.eql(\"string\");\r",
									"    // pm.expect(pm.response.json().email).to.eql(JSON.parse(pm.request.body.raw).email)\r",
									"    pm.collectionVariables.set(\"email\", pm.response.json().email);\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[1.1] TC13 Validate Check createdAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().createdAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().createdAt).to.be.eql('string');\r",
									"    pm.collectionVariables.set(\"createdAt\", pm.response.json().createdAt);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.1] TC14 Validate Check updatedAt is equal to the expected value\", function () {\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.null;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.undefined;\r",
									"    pm.expect(pm.response.json().updatedAt).to.not.be.empty;\r",
									"    pm.expect(typeof pm.response.json().updatedAt).to.be.an('string');\r",
									"    pm.collectionVariables.set(\"updatedAt\", pm.response.json().updatedAt);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}wishlists/:id",
							"host": [
								"{{baseURL}}wishlists"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{whishlistId}}"
								}
							]
						},
						"description": "This endpoint retrieves the details of a specific wishlist identified by its unique ID.\n\n### Response\n\nThe response for this request can be documented as a JSON schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"firstName\": {\n      \"type\": \"string\"\n    },\n    \"lastName\": {\n      \"type\": \"string\"\n    },\n    \"email\": {\n      \"type\": \"string\"\n    },\n    \"createdAt\": {\n      \"type\": \"string\"\n    },\n    \"updatedAt\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"integer\"\n    }\n  }\n}\n\n ```"
					},
					"response": [
						{
							"name": "4.4 Get A Wishlist Copy",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/wishlists/:id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"wishlists",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{whishlistId}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "184"
								},
								{
									"key": "ETag",
									"value": "W/\"b8-Cj4L0r98WlwneQAOalg+cwyNhd8\""
								},
								{
									"key": "Date",
									"value": "Sat, 10 May 2025 03:49:56 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"firstName\": \"Ambrose\",\n    \"lastName\": \"Koch\",\n    \"email\": \"Jessika28@hotmail.com\",\n    \"createdAt\": \"2025-05-10T03:49:06.278Z\",\n    \"updatedAt\": \"2025-05-10T03:49:36.878Z\",\n    \"id\": 43\n}"
						}
					]
				},
				{
					"name": "4.5 Delete A Wishlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[1.8] TC01 Validate Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.8] TC02 Validate Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"pm.test(\"[1.8] TC03 Validate Check response body to not contain whishlistId\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"whishlistId\");\r",
									"});\r",
									"\r",
									"pm.test(\"[1.8] TC04 Validate Status code is 200 or 204\", function () {\r",
									"    pm.expect([200, 204]).to.include(pm.response.code);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}wishlists/:id",
							"host": [
								"{{baseURL}}wishlists"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{whishlistId}}"
								}
							]
						},
						"description": "# Delete Wishlist\n\nThis endpoint deletes a specific wishlist identified by its unique ID.\n\n## Request\n\n### Path Parameters\n\n- `id` (integer): The unique identifier of the wishlist to be deleted.\n    \n\n## Response\n\n- `null`"
					},
					"response": [
						{
							"name": "4.5 Delete A Wishlist",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/wishlists/:id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"wishlists",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{whishlistId}}"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Date",
									"value": "Sat, 10 May 2025 03:50:15 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "4.6 Get A Wishlist Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[2.1] TC01 Validate Response Code For Adding New Book is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.have.equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"[2.1] TC02 Validate Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"[2.1] TC03 Validate Check Login response body contain Id\", function () {\r",
									"    pm.expect(pm.response.json()).to.not.have.property(\"id\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}wishlists/:id",
							"host": [
								"{{baseURL}}wishlists"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{whishlistId}}"
								}
							]
						},
						"description": "This endpoint retrieves the details of a specific wishlist identified by the provided ID. The request does not contain a request body, as it is a GET request. The response will include the details of the wishlist, such as its ID, name, items, and any other relevant information associated with the wishlist."
					},
					"response": [
						{
							"name": "4.6 Get A Wishlist Copy",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/wishlists/:id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"wishlists",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{whishlistId}}"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "37"
								},
								{
									"key": "ETag",
									"value": "W/\"25-vKPJ6piY9SvfRkJ/XHxwKNESMOw\""
								},
								{
									"key": "Date",
									"value": "Sat, 10 May 2025 03:50:54 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Wishlist not found\"\n}"
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "bookId",
			"value": 65
		},
		{
			"key": "houseHoldId",
			"value": "23"
		},
		{
			"key": "userId",
			"value": "39"
		},
		{
			"key": "whishlistId",
			"value": "38"
		},
		{
			"key": "title",
			"value": "Intelligent Soft Chips"
		},
		{
			"key": "author",
			"value": "Claire Glover"
		},
		{
			"key": "isbn",
			"value": "267-255-2598"
		},
		{
			"key": "releaseDate",
			"value": "Sat Jul 27 2024 21:31:32 GMT-0500 (Central Daylight Time)"
		},
		{
			"key": "Id",
			"value": "19"
		},
		{
			"key": "updatedAt",
			"value": "2025-05-05T21:39:27.270Z"
		},
		{
			"key": "createdAt",
			"value": "2025-05-05T21:39:27.270Z"
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "lastName",
			"value": ""
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "firstName",
			"value": ""
		}
	]
}